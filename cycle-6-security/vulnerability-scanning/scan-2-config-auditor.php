<?php
/**
 * Configuration Security Auditor
 * 
 * @package MoneyQuiz\Security\Scanner
 * @version 1.0.0
 */

namespace MoneyQuiz\Security\Scanner;

/**
 * Configuration Auditor
 */
class ConfigurationAuditor {
    
    private $issues = [];
    
    /**
     * Audit all configurations
     */
    public function auditConfiguration() {
        return [
            'wordpress' => $this->auditWordPressConfig(),
            'server' => $this->auditServerConfig(),
            'database' => $this->auditDatabaseConfig(),
            'file_permissions' => $this->auditFilePermissions(),
            'security_headers' => $this->auditSecurityHeaders(),
            'summary' => $this->generateSummary()
        ];
    }
    
    /**
     * Audit WordPress configuration
     */
    private function auditWordPressConfig() {
        $issues = [];
        
        // Check debug mode
        if (defined('WP_DEBUG') && WP_DEBUG) {
            $issues[] = [
                'severity' => 'medium',
                'issue' => 'Debug mode is enabled',
                'recommendation' => 'Disable WP_DEBUG in production'
            ];
        }
        
        // Check debug display
        if (defined('WP_DEBUG_DISPLAY') && WP_DEBUG_DISPLAY) {
            $issues[] = [
                'severity' => 'high',
                'issue' => 'Debug information is displayed',
                'recommendation' => 'Set WP_DEBUG_DISPLAY to false'
            ];
        }
        
        // Check file editing
        if (!defined('DISALLOW_FILE_EDIT') || !DISALLOW_FILE_EDIT) {
            $issues[] = [
                'severity' => 'medium',
                'issue' => 'File editing is allowed in admin',
                'recommendation' => 'Define DISALLOW_FILE_EDIT as true'
            ];
        }
        
        // Check security keys
        $keys = [
            'AUTH_KEY',
            'SECURE_AUTH_KEY',
            'LOGGED_IN_KEY',
            'NONCE_KEY',
            'AUTH_SALT',
            'SECURE_AUTH_SALT',
            'LOGGED_IN_SALT',
            'NONCE_SALT'
        ];
        
        foreach ($keys as $key) {
            if (!defined($key) || strlen(constant($key)) < 32) {
                $issues[] = [
                    'severity' => 'high',
                    'issue' => "{$key} is not properly defined",
                    'recommendation' => 'Generate strong security keys'
                ];
            }
        }
        
        // Check SSL
        if (!is_ssl() && !$this->isLocalEnvironment()) {
            $issues[] = [
                'severity' => 'high',
                'issue' => 'Site is not using HTTPS',
                'recommendation' => 'Enable SSL/TLS'
            ];
        }
        
        // Check auto-updates
        if (defined('AUTOMATIC_UPDATER_DISABLED') && AUTOMATIC_UPDATER_DISABLED) {
            $issues[] = [
                'severity' => 'low',
                'issue' => 'Automatic updates are disabled',
                'recommendation' => 'Consider enabling automatic security updates'
            ];
        }
        
        $this->issues = array_merge($this->issues, $issues);
        return $issues;
    }
    
    /**
     * Audit server configuration
     */
    private function auditServerConfig() {
        $issues = [];
        
        // Check PHP version
        if (version_compare(PHP_VERSION, '7.4', '<')) {
            $issues[] = [
                'severity' => 'high',
                'issue' => 'PHP version is outdated',
                'recommendation' => 'Upgrade to PHP 7.4 or higher'
            ];
        }
        
        // Check expose_php
        if (ini_get('expose_php')) {
            $issues[] = [
                'severity' => 'low',
                'issue' => 'PHP version is exposed in headers',
                'recommendation' => 'Set expose_php to Off'
            ];
        }
        
        // Check display_errors
        if (ini_get('display_errors')) {
            $issues[] = [
                'severity' => 'high',
                'issue' => 'PHP errors are displayed',
                'recommendation' => 'Set display_errors to Off'
            ];
        }
        
        // Check open_basedir
        if (!ini_get('open_basedir')) {
            $issues[] = [
                'severity' => 'medium',
                'issue' => 'open_basedir is not configured',
                'recommendation' => 'Restrict file access with open_basedir'
            ];
        }
        
        // Check dangerous functions
        $dangerous_functions = ['exec', 'system', 'shell_exec', 'passthru', 'eval'];
        $disabled = explode(',', ini_get('disable_functions'));
        
        foreach ($dangerous_functions as $func) {
            if (!in_array($func, $disabled) && function_exists($func)) {
                $issues[] = [
                    'severity' => 'medium',
                    'issue' => "Dangerous function {$func} is enabled",
                    'recommendation' => "Add {$func} to disable_functions"
                ];
            }
        }
        
        $this->issues = array_merge($this->issues, $issues);
        return $issues;
    }
    
    /**
     * Audit database configuration
     */
    private function auditDatabaseConfig() {
        global $wpdb;
        $issues = [];
        
        // Check table prefix
        if ($wpdb->prefix === 'wp_') {
            $issues[] = [
                'severity' => 'low',
                'issue' => 'Using default table prefix',
                'recommendation' => 'Use a custom table prefix'
            ];
        }
        
        // Check database user privileges
        $privileges = $wpdb->get_results("SHOW GRANTS FOR CURRENT_USER()");
        foreach ($privileges as $grant) {
            if (strpos($grant->{'Grants for ' . DB_USER . '@' . DB_HOST}, 'ALL PRIVILEGES') !== false) {
                $issues[] = [
                    'severity' => 'medium',
                    'issue' => 'Database user has all privileges',
                    'recommendation' => 'Limit database user privileges'
                ];
                break;
            }
        }
        
        $this->issues = array_merge($this->issues, $issues);
        return $issues;
    }
    
    /**
     * Audit file permissions
     */
    private function auditFilePermissions() {
        $issues = [];
        
        // Check wp-config.php
        $config_perms = fileperms(ABSPATH . 'wp-config.php');
        if ($config_perms & 0022) {
            $issues[] = [
                'severity' => 'high',
                'issue' => 'wp-config.php is writable by group/others',
                'recommendation' => 'Set wp-config.php permissions to 440 or 400'
            ];
        }
        
        // Check uploads directory
        $upload_dir = wp_upload_dir();
        if (is_writable($upload_dir['basedir'])) {
            $perms = fileperms($upload_dir['basedir']);
            if ($perms & 0002) {
                $issues[] = [
                    'severity' => 'medium',
                    'issue' => 'Uploads directory is world-writable',
                    'recommendation' => 'Set uploads directory permissions to 755'
                ];
            }
        }
        
        $this->issues = array_merge($this->issues, $issues);
        return $issues;
    }
    
    /**
     * Audit security headers
     */
    private function auditSecurityHeaders() {
        $issues = [];
        $headers = $this->getCurrentHeaders();
        
        $required_headers = [
            'X-Content-Type-Options' => 'nosniff',
            'X-Frame-Options' => ['DENY', 'SAMEORIGIN'],
            'X-XSS-Protection' => '1; mode=block',
            'Referrer-Policy' => true,
            'Content-Security-Policy' => true
        ];
        
        foreach ($required_headers as $header => $expected) {
            if (!isset($headers[$header])) {
                $issues[] = [
                    'severity' => 'medium',
                    'issue' => "Missing security header: {$header}",
                    'recommendation' => "Add {$header} header"
                ];
            }
        }
        
        if (is_ssl() && !isset($headers['Strict-Transport-Security'])) {
            $issues[] = [
                'severity' => 'high',
                'issue' => 'Missing HSTS header',
                'recommendation' => 'Add Strict-Transport-Security header'
            ];
        }
        
        $this->issues = array_merge($this->issues, $issues);
        return $issues;
    }
    
    /**
     * Get current headers
     */
    private function getCurrentHeaders() {
        if (function_exists('getallheaders')) {
            return getallheaders();
        }
        return [];
    }
    
    /**
     * Check if local environment
     */
    private function isLocalEnvironment() {
        $local_indicators = ['localhost', '127.0.0.1', '.local', '.test'];
        $host = $_SERVER['HTTP_HOST'] ?? '';
        
        foreach ($local_indicators as $indicator) {
            if (strpos($host, $indicator) !== false) {
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * Generate summary
     */
    private function generateSummary() {
        $severity_count = [
            'critical' => 0,
            'high' => 0,
            'medium' => 0,
            'low' => 0
        ];
        
        foreach ($this->issues as $issue) {
            $severity = $issue['severity'] ?? 'low';
            $severity_count[$severity]++;
        }
        
        return [
            'total_issues' => count($this->issues),
            'by_severity' => $severity_count
        ];
    }
}
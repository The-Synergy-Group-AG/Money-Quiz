name: Deployment Validation

on:
  release:
    types: [created]
  workflow_dispatch:  # Allow manual trigger for testing

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          tools: composer
      
      - name: Pre-deployment Security Checks
        run: |
          echo "üîê Running pre-deployment security validation..."
          
          # No debug code
          echo "Checking for debug code..."
          if grep -r "var_dump\|console\.log\|print_r\|error_log\|WP_DEBUG" --include="*.php" --include="*.js" .; then
            echo "‚ùå Debug code found in production build"
            exit 1
          fi
          
          # No TODO comments
          echo "Checking for TODO comments..."
          if grep -r "TODO\|FIXME\|XXX\|HACK" --include="*.php" .; then
            echo "‚ùå Unresolved TODO comments found"
            exit 1
          fi
          
          # No development dependencies
          echo "Checking composer dependencies..."
          if grep -q "require-dev" composer.json && [ -d "vendor" ]; then
            composer install --no-dev --optimize-autoloader
          fi
          
          echo "‚úÖ Security checks passed"
      
      - name: Required Files Check
        run: |
          echo "üìã Checking required WordPress plugin files..."
          
          required_files=(
            "money-quiz.php"
            "uninstall.php"
            "readme.txt"
            "LICENSE"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Required file missing: $file"
              exit 1
            fi
          done
          
          echo "‚úÖ All required files present"
      
      - name: Plugin Header Validation
        run: |
          echo "üìÑ Validating plugin headers..."
          
          if ! grep -q "Plugin Name:" money-quiz.php; then
            echo "‚ùå Plugin Name header missing"
            exit 1
          fi
          
          if ! grep -q "Version:" money-quiz.php; then
            echo "‚ùå Version header missing"
            exit 1
          fi
          
          if ! grep -q "Requires at least:" money-quiz.php; then
            echo "‚ùå WordPress version requirement missing"
            exit 1
          fi
          
          echo "‚úÖ Plugin headers valid"
      
      - name: Grok Approval Check
        run: |
          echo "ü§ñ Checking for Grok approval..."
          
          # Check if latest Grok review exists and passed
          if [ -f "docs/70-reviews/01-grok-reviews/final-review.md" ]; then
            if grep -q "Rating:.*9[5-9]%" "docs/70-reviews/01-grok-reviews/final-review.md"; then
              echo "‚úÖ Grok approval found (95%+)"
            else
              echo "‚ùå Grok approval below 95% threshold"
              exit 1
            fi
          else
            echo "‚ùå Final Grok review not found"
            exit 1
          fi
      
      - name: Build Release Package
        run: |
          echo "üì¶ Building release package..."
          
          # Clean build
          rm -rf build/
          mkdir -p build/money-quiz
          
          # Copy files
          rsync -av --exclude-from='.distignore' . build/money-quiz/
          
          # Create zip
          cd build
          zip -r money-quiz-v7.zip money-quiz/
          
          echo "‚úÖ Release package created: money-quiz-v7.zip"
      
      - name: Upload Release Artifact
        uses: actions/upload-artifact@v3
        with:
          name: money-quiz-release
          path: build/money-quiz-v7.zip
      
      - name: Final Validation
        run: |
          echo "üéØ Final deployment validation..."
          echo "‚úÖ All deployment checks passed!"
          echo ""
          echo "‚ö†Ô∏è  Remember: This plugin requires 95%+ Grok approval!"
          echo "‚ö†Ô∏è  Ensure final testing in staging environment before production deployment"
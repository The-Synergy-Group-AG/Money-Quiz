<?php
/**
 * Dependency Vulnerability Checker
 * 
 * @package MoneyQuiz\Security\Scanner
 * @version 1.0.0
 */

namespace MoneyQuiz\Security\Scanner;

/**
 * Dependency Checker
 */
class DependencyChecker {
    
    private $vulnerabilities = [];
    private $composer_lock;
    private $package_json;
    
    /**
     * Check all dependencies
     */
    public function checkDependencies() {
        $results = [
            'php' => $this->checkPhpDependencies(),
            'javascript' => $this->checkJsDependencies(),
            'wordpress' => $this->checkWordPressDependencies(),
            'summary' => []
        ];
        
        // Calculate summary
        $results['summary'] = [
            'total_vulnerabilities' => count($this->vulnerabilities),
            'critical' => $this->countBySeverity('critical'),
            'high' => $this->countBySeverity('high'),
            'medium' => $this->countBySeverity('medium'),
            'low' => $this->countBySeverity('low')
        ];
        
        return $results;
    }
    
    /**
     * Check PHP dependencies
     */
    private function checkPhpDependencies() {
        $vulnerabilities = [];
        
        // Check composer.lock
        $composer_lock = $this->getComposerLock();
        if (!$composer_lock) {
            return ['error' => 'composer.lock not found'];
        }
        
        // Check each package
        foreach ($composer_lock['packages'] as $package) {
            $issues = $this->checkPhpPackage($package);
            if (!empty($issues)) {
                $vulnerabilities[$package['name']] = $issues;
            }
        }
        
        // Check PHP version
        $php_issues = $this->checkPhpVersion();
        if (!empty($php_issues)) {
            $vulnerabilities['php'] = $php_issues;
        }
        
        return $vulnerabilities;
    }
    
    /**
     * Check JavaScript dependencies
     */
    private function checkJsDependencies() {
        $vulnerabilities = [];
        
        // Check package-lock.json
        $package_lock = $this->getPackageLock();
        if (!$package_lock) {
            return ['error' => 'package-lock.json not found'];
        }
        
        // Check each dependency
        if (isset($package_lock['dependencies'])) {
            foreach ($package_lock['dependencies'] as $name => $info) {
                $issues = $this->checkJsPackage($name, $info);
                if (!empty($issues)) {
                    $vulnerabilities[$name] = $issues;
                }
            }
        }
        
        return $vulnerabilities;
    }
    
    /**
     * Check WordPress dependencies
     */
    private function checkWordPressDependencies() {
        $vulnerabilities = [];
        
        // Check WordPress version
        global $wp_version;
        $wp_issues = $this->checkWordPressVersion($wp_version);
        if (!empty($wp_issues)) {
            $vulnerabilities['wordpress-core'] = $wp_issues;
        }
        
        // Check active plugins
        $plugins = get_plugins();
        foreach ($plugins as $plugin_file => $plugin_data) {
            if (is_plugin_active($plugin_file)) {
                $issues = $this->checkWordPressPlugin($plugin_data);
                if (!empty($issues)) {
                    $vulnerabilities[$plugin_data['Name']] = $issues;
                }
            }
        }
        
        // Check active theme
        $theme = wp_get_theme();
        $theme_issues = $this->checkWordPressTheme($theme);
        if (!empty($theme_issues)) {
            $vulnerabilities[$theme->get('Name')] = $theme_issues;
        }
        
        return $vulnerabilities;
    }
    
    /**
     * Check PHP package for vulnerabilities
     */
    private function checkPhpPackage($package) {
        // Known vulnerable packages (simplified - in production, use a vulnerability database)
        $known_vulnerabilities = [
            'symfony/http-kernel' => [
                '<4.4.35' => ['CVE-2021-41267', 'high', 'HTTP Host Header Injection'],
                '<5.3.12' => ['CVE-2021-41268', 'medium', 'Session Fixation']
            ],
            'guzzlehttp/guzzle' => [
                '<6.5.8' => ['CVE-2022-31090', 'high', 'Cookie Injection'],
                '<7.4.5' => ['CVE-2022-31091', 'high', 'Header Injection']
            ]
        ];
        
        $issues = [];
        $package_name = $package['name'];
        $version = $package['version'];
        
        if (isset($known_vulnerabilities[$package_name])) {
            foreach ($known_vulnerabilities[$package_name] as $affected_version => $vuln_info) {
                if (version_compare($version, $affected_version, '<')) {
                    $issues[] = [
                        'cve' => $vuln_info[0],
                        'severity' => $vuln_info[1],
                        'description' => $vuln_info[2],
                        'affected_version' => $affected_version,
                        'current_version' => $version
                    ];
                    
                    $this->vulnerabilities[] = [
                        'type' => 'php',
                        'package' => $package_name,
                        'severity' => $vuln_info[1]
                    ];
                }
            }
        }
        
        return $issues;
    }
    
    /**
     * Check PHP version
     */
    private function checkPhpVersion() {
        $issues = [];
        $current_version = PHP_VERSION;
        
        // Check if PHP version is EOL
        $eol_versions = [
            '7.2' => '2020-11-30',
            '7.3' => '2021-12-06',
            '7.4' => '2022-11-28',
            '8.0' => '2023-11-26'
        ];
        
        $major_minor = substr($current_version, 0, 3);
        
        if (isset($eol_versions[$major_minor])) {
            $eol_date = $eol_versions[$major_minor];
            if (strtotime($eol_date) < time()) {
                $issues[] = [
                    'severity' => 'high',
                    'description' => "PHP {$major_minor} is end-of-life since {$eol_date}",
                    'recommendation' => 'Upgrade to a supported PHP version'
                ];
                
                $this->vulnerabilities[] = [
                    'type' => 'php',
                    'package' => 'php',
                    'severity' => 'high'
                ];
            }
        }
        
        return $issues;
    }
    
    /**
     * Get composer.lock
     */
    private function getComposerLock() {
        $lock_file = ABSPATH . '/../composer.lock';
        
        if (file_exists($lock_file)) {
            return json_decode(file_get_contents($lock_file), true);
        }
        
        return null;
    }
    
    /**
     * Get package-lock.json
     */
    private function getPackageLock() {
        $lock_file = ABSPATH . '/../package-lock.json';
        
        if (file_exists($lock_file)) {
            return json_decode(file_get_contents($lock_file), true);
        }
        
        return null;
    }
    
    /**
     * Count vulnerabilities by severity
     */
    private function countBySeverity($severity) {
        return count(array_filter($this->vulnerabilities, function($vuln) use ($severity) {
            return $vuln['severity'] === $severity;
        }));
    }
}
<?php
/**
 * Vulnerability Scanner Loader
 * 
 * @package MoneyQuiz\Security\Scanner
 * @version 1.0.0
 */

namespace MoneyQuiz\Security\Scanner;

// Load all components
require_once __DIR__ . '/scan-1-dependency-checker.php';
require_once __DIR__ . '/scan-2-config-auditor.php';
require_once __DIR__ . '/scan-3-automated-scanner.php';

/**
 * Vulnerability Scanner Manager
 */
class VulnerabilityScanner {
    
    private static $instance = null;
    private $dependency_checker;
    private $config_auditor;
    private $automated_scanner;
    
    private function __construct() {
        $this->dependency_checker = new DependencyChecker();
        $this->config_auditor = new ConfigurationAuditor();
        $this->automated_scanner = new AutomatedScanner();
    }
    
    /**
     * Get singleton instance
     */
    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * Initialize scanner
     */
    public static function init() {
        $instance = self::getInstance();
        
        // Add admin menu
        add_action('admin_menu', [$instance, 'addAdminMenu']);
        
        // Schedule regular scans
        if (!wp_next_scheduled('money_quiz_security_scan')) {
            wp_schedule_event(time(), 'weekly', 'money_quiz_security_scan');
        }
        
        add_action('money_quiz_security_scan', [$instance, 'runScheduledScan']);
        
        // Add REST endpoints
        add_action('rest_api_init', [$instance, 'registerRestEndpoints']);
        
        // Add admin notices for critical issues
        add_action('admin_notices', [$instance, 'showSecurityNotices']);
    }
    
    /**
     * Run full security scan
     */
    public function runFullScan() {
        $results = [
            'timestamp' => current_time('mysql'),
            'dependency_scan' => $this->dependency_checker->checkDependencies(),
            'configuration_audit' => $this->config_auditor->auditConfiguration(),
            'vulnerability_scan' => $this->automated_scanner->runFullScan()
        ];
        
        // Calculate overall security score
        $results['security_score'] = $this->calculateSecurityScore($results);
        
        // Store results
        update_option('money_quiz_security_scan_results', $results);
        update_option('money_quiz_last_security_scan', time());
        
        // Log scan
        if (function_exists('money_quiz_audit_log')) {
            money_quiz_audit_log('security.scan.completed', 'info', [
                'security_score' => $results['security_score']
            ]);
        }
        
        return $results;
    }
    
    /**
     * Run scheduled scan
     */
    public function runScheduledScan() {
        $results = $this->runFullScan();
        
        // Send alert if critical issues found
        if ($results['security_score'] < 70) {
            $this->sendSecurityAlert($results);
        }
    }
    
    /**
     * Calculate security score
     */
    private function calculateSecurityScore($results) {
        $total_score = 0;
        $weight_total = 0;
        
        // Dependency scan score
        if (isset($results['dependency_scan']['summary'])) {
            $dep_score = 100;
            $dep_score -= $results['dependency_scan']['summary']['critical'] * 20;
            $dep_score -= $results['dependency_scan']['summary']['high'] * 10;
            $dep_score -= $results['dependency_scan']['summary']['medium'] * 5;
            $dep_score -= $results['dependency_scan']['summary']['low'] * 2;
            
            $total_score += max(0, $dep_score) * 0.3;
            $weight_total += 0.3;
        }
        
        // Configuration audit score
        if (isset($results['configuration_audit']['summary'])) {
            $config_score = 100;
            $config_score -= $results['configuration_audit']['summary']['by_severity']['critical'] * 25;
            $config_score -= $results['configuration_audit']['summary']['by_severity']['high'] * 15;
            $config_score -= $results['configuration_audit']['summary']['by_severity']['medium'] * 8;
            $config_score -= $results['configuration_audit']['summary']['by_severity']['low'] * 3;
            
            $total_score += max(0, $config_score) * 0.3;
            $weight_total += 0.3;
        }
        
        // Vulnerability scan score
        if (isset($results['vulnerability_scan']['summary'])) {
            $vuln_score = $results['vulnerability_scan']['summary']['security_score'];
            $total_score += $vuln_score * 0.4;
            $weight_total += 0.4;
        }
        
        return $weight_total > 0 ? round($total_score / $weight_total) : 0;
    }
    
    /**
     * Send security alert
     */
    private function sendSecurityAlert($results) {
        $admins = get_users(['role' => 'administrator']);
        
        foreach ($admins as $admin) {
            wp_mail(
                $admin->user_email,
                '[Money Quiz] Security Alert - Critical Issues Found',
                $this->formatSecurityAlert($results),
                ['Content-Type: text/html; charset=UTF-8']
            );
        }
    }
    
    /**
     * Format security alert email
     */
    private function formatSecurityAlert($results) {
        $html = '<h2>Security Scan Results</h2>';
        $html .= '<p>Security Score: <strong>' . $results['security_score'] . '/100</strong></p>';
        
        // Add critical issues
        $html .= '<h3>Critical Issues Found:</h3><ul>';
        
        // Add dependency issues
        if (isset($results['dependency_scan']['summary']['critical']) && 
            $results['dependency_scan']['summary']['critical'] > 0) {
            $html .= '<li>Critical dependency vulnerabilities: ' . 
                     $results['dependency_scan']['summary']['critical'] . '</li>';
        }
        
        $html .= '</ul>';
        $html .= '<p>Please log in to your WordPress admin to view full details.</p>';
        
        return $html;
    }
    
    /**
     * Show security notices
     */
    public function showSecurityNotices() {
        $last_scan = get_option('money_quiz_last_security_scan');
        
        // Show notice if no scan in 30 days
        if (!$last_scan || (time() - $last_scan) > 30 * DAY_IN_SECONDS) {
            ?>
            <div class="notice notice-warning">
                <p><strong>Security Notice:</strong> 
                It's been over 30 days since your last security scan. 
                <a href="<?php echo admin_url('admin.php?page=money-quiz-scanner'); ?>">
                Run Security Scan
                </a>
                </p>
            </div>
            <?php
        }
        
        // Show critical issues if any
        $results = get_option('money_quiz_security_scan_results');
        if ($results && $results['security_score'] < 70) {
            ?>
            <div class="notice notice-error">
                <p><strong>Security Alert:</strong> 
                Critical security issues detected (Score: <?php echo $results['security_score']; ?>/100).
                <a href="<?php echo admin_url('admin.php?page=money-quiz-scanner'); ?>">
                View Details
                </a>
                </p>
            </div>
            <?php
        }
    }
    
    /**
     * Add admin menu
     */
    public function addAdminMenu() {
        add_submenu_page(
            'money-quiz',
            'Security Scanner',
            'Security Scanner',
            'manage_options',
            'money-quiz-scanner',
            [$this, 'renderAdminPage']
        );
    }
    
    /**
     * Render admin page
     */
    public function renderAdminPage() {
        if (!current_user_can('manage_options')) {
            wp_die('Unauthorized');
        }
        
        // Run scan if requested
        if (isset($_POST['run_scan']) && check_admin_referer('money_quiz_security_scan')) {
            $results = $this->runFullScan();
            echo '<div class="notice notice-success"><p>Security scan completed!</p></div>';
        }
        
        // Get latest results
        $results = get_option('money_quiz_security_scan_results');
        $last_scan = get_option('money_quiz_last_security_scan');
        
        include __DIR__ . '/views/scanner-admin.php';
    }
    
    /**
     * Register REST endpoints
     */
    public function registerRestEndpoints() {
        register_rest_route('money-quiz/v1', '/security/scan', [
            'methods' => 'POST',
            'callback' => [$this, 'runScanEndpoint'],
            'permission_callback' => function() {
                return current_user_can('manage_options');
            }
        ]);
        
        register_rest_route('money-quiz/v1', '/security/results', [
            'methods' => 'GET',
            'callback' => [$this, 'getResultsEndpoint'],
            'permission_callback' => function() {
                return current_user_can('manage_options');
            }
        ]);
    }
    
    /**
     * Run scan endpoint
     */
    public function runScanEndpoint($request) {
        $results = $this->runFullScan();
        return rest_ensure_response($results);
    }
    
    /**
     * Get results endpoint
     */
    public function getResultsEndpoint($request) {
        $results = get_option('money_quiz_security_scan_results');
        return rest_ensure_response($results ?: ['error' => 'No scan results available']);
    }
}

// Helper function
if (!function_exists('money_quiz_security_scan')) {
    function money_quiz_security_scan() {
        return VulnerabilityScanner::getInstance()->runFullScan();
    }
}

// Initialize on plugins_loaded
add_action('plugins_loaded', [VulnerabilityScanner::class, 'init']);